Description: >
    Gabriel Onike / udagramServerstack UdacityProject 2022

Parameters:
    EnvironmentName:
        Description: creating securitygroups for LoadBalancer and WebServer - EnvironmentName in params is connected to Outputs in udagram/udacityProject VPC
        Type: String

Resources:
            LBSecGroup:
                Type: AWS::EC2::SecurityGroup
                Properties:
                  GroupDescription: Allow http to our load balancer
                  VpcId:
                    Fn::ImportValue:
                      !Sub "${EnvironmentName}-VPCID"
                  SecurityGroupIngress:
                  - IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                  SecurityGroupEgress:
                  - IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
            WebServerSecGroup:
                Type: AWS::EC2::SecurityGroup
                Properties:
                  GroupDescription: Allow http to our hosts and SSH from local only
                  VpcId:
                    Fn::ImportValue:
                      !Sub "${EnvironmentName}-VPCID"
                  SecurityGroupIngress:
                  - IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                  - IpProtocol: tcp
                    FromPort: 22
                    ToPort: 22
                    CidrIp: 0.0.0.0/0
                  SecurityGroupEgress:
                  - IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0  
            WebAppLaunchConfig:
              Type: AWS::AutoScaling::LaunchConfiguration
              Properties:
                  UserData:
                    Fn::Base64: !Sub |
                      #!/bin/bash
                      sudo apt-get update -y
                      sudo apt-get install apache2 -y
                      sudo systemctl start apache2.service
                      cd /var/www/html
                      echo "it works! Udagram, Udacity" > index.html
                  # The commented ABOVE install the Apache Tomcat server, starting the server, and then create an index.html page at the default location              
                  # ToDo: AMI ID of Ubuntu Linux machine. Too get one, try creating a VM from the web console. 
                  # DONE ami used below is for us-east-1 -chnaged from ami-0729e439b6769d6ab to ami-0df32f8302dfe67df
                  ImageId: ami-0df32f8302dfe67df
                  # ToDo: Change the key-pair name,as applicable.Keyname should be absent in production.hence its commented out below 
                  # KeyName: VocareumKey2  
                  SecurityGroups:
                  - Ref: WebServerSecGroup
                  InstanceType: t3.medium
                  BlockDeviceMappings:
                  - DeviceName: "/dev/sdk"
                    Ebs:
                      VolumeSize: '10'
            WebAppGroup:
              Type: AWS::AutoScaling::AutoScalingGroup
              Properties:
                VPCZoneIdentifier:
                - Fn::ImportValue: 
                    !Sub "${EnvironmentName}-PRIV-NETS"
                LaunchConfigurationName:
                  Ref: WebAppLaunchConfig
                MinSize: '3'
                MaxSize: '5'
                TargetGroupARNs: 
                - Ref: WebAppTargetGroup       
            WebAppLB:
              Type: AWS::ElasticLoadBalancingV2::LoadBalancer
              Properties:
                Subnets:
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
                - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
                SecurityGroups:
                - Ref: LBSecGroup
            Listener:
              Type: AWS::ElasticLoadBalancingV2::Listener
              Properties:
                DefaultActions:
                - Type: forward
                  TargetGroupArn:
                    Ref: WebAppTargetGroup
                LoadBalancerArn:
                  Ref: WebAppLB
                Port: '80'
                Protocol: HTTP
            ALBListenerRule:
                Type: AWS::ElasticLoadBalancingV2::ListenerRule
                Properties:
                  Actions:
                  - Type: forward
                    TargetGroupArn: !Ref 'WebAppTargetGroup'
                  Conditions:
                  - Field: path-pattern
                    Values: [/]
                  ListenerArn: !Ref 'Listener'
                  Priority: 1
            WebAppTargetGroup:
              Type: AWS::ElasticLoadBalancingV2::TargetGroup
              Properties:
                HealthCheckIntervalSeconds: 11
                HealthCheckPath: /
                HealthCheckProtocol: HTTP
                HealthCheckTimeoutSeconds: 8
                HealthyThresholdCount: 2
                Port: 80
                Protocol: HTTP
                UnhealthyThresholdCount: 5
                VpcId: 
                  Fn::ImportValue:
                    Fn::Sub: "${EnvironmentName}-VPCID"


Outputs:
            WebServerApplicationLoadBalancerURL:
                Description: The Load Balancer URL
                Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName,]]
                Export:
                    Name: !Sub ${EnvironmentName}-DNS-NAME